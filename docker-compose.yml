version: '3.8'

services:
  kong:
    image: kong:latest
    restart: always
    networks:
      - db-network
    environment:
      KONG_DATABASE: off
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled,cors
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml

  kafka:
    image: apache/kafka:latest
    restart: always
    networks:
      - db-network
    ports:
      - "9092:9092"
      - "9093:9093"
      - "7071:7071"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=0.0.0.0 -Djava.net.preferIPv4Stack=true -javaagent:/opt/jmx_prometheus_javaagent-0.17.2.jar=7071:/opt/kafka.yml"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./prometheus/jmx_prometheus_javaagent-0.17.2.jar:/opt/jmx_prometheus_javaagent-0.17.2.jar
      - ./prometheus/kafka.yml:/opt/kafka.yml

  mysql-db:
    image: mysql:8.4.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: auth_service  # Tạo sẵn database auth_service
      MYSQL_USER: auth_user         # Tạo user cho auth-service
      MYSQL_PASSWORD: auth_password # Mật khẩu cho user
      MYSQL_ROOT_HOST: '%'          # Cho phép truy cập từ bất kỳ host nào
    command: --max_allowed_packet=128M --wait_timeout=28800 --interactive_timeout=28800 # Thêm file init SQL
    ports:
      - "3306:3306"
    networks:
      - db-network
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # File init để tạo law_service
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8082:80
    depends_on:
      - mysql-db
    networks:
      - db-network
    environment:
      PMA_HOST: mysql-db
      UPLOAD_LIMIT: 300M

  auth-service:
    build: ./auth-service
    restart: always
    depends_on:
      mysql-db:
        condition: service_healthy  # Chờ MySQL sẵn sàng
      keycloak:
        condition: service_started
    networks:
      - db-network
    env_file:
      - ./auth-service/src/main/resources/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/auth_service
    ports:
      - "9001:9001"

  law-service:
    build: ./law-service
    restart: always
    depends_on:
      mysql-db:
        condition: service_healthy  # Chờ MySQL sẵn sàng
    networks:
      - db-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/law_service
    ports:
      - "9002:9002"

#  react-frontend:
#    build:
#      context: ./front-end/website
#      dockerfile: Dockerfile
#    ports:
#      - "5173:5173"
#    networks:
#      - db-network
#    depends_on:
#      - kong
#    expose:
#      - "5173"
#      - "3000"
#    volumes:
#      - ./front-end/website:/app
#      - /app/node_modules
#    env_file:
#      - ./front-end/website/.env

  crawl-api:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: uvicorn api:app --host 0.0.0.0 --port 5000 --reload
    restart: always
    depends_on:
      - mysql-db
      - redis
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    ports:
      - "5000:5000"
    volumes:
      - ./crawl:/app

  celery-worker:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: celery -A celery_app worker --loglevel=info
    restart: always
    depends_on:
      - redis
      - mysql-db
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    volumes:
      - ./crawl:/app

  celery-beat:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: celery -A celery_app beat --loglevel=info
    restart: always
    depends_on:
      - redis
      - mysql-db
      - celery-worker
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    volumes:
      - ./crawl:/app

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - db-network

  prometheus:
    image: prom/prometheus:v2.48.0
    restart: always
    networks:
      - db-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    depends_on:
      - kafka


  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - db-network
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disable security for local dev
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - thread_pool.write.queue_size=1000
      - http.max_content_length=500mb
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.4
    container_name: keycloak
    environment:
      - KC_FEATURES=scripts,token-exchange,admin-fine-grained-authz
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HOSTNAME=localhost
    ports:
      - "8080:8080"
    depends_on:
      - keycloak-db
    command: start-dev
    networks:
      - db-network

  keycloak-db:
    image: postgres:14
    container_name: keycloak-db
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - db-network

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-service
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db-network

  chroma-db:
      image: chromadb/chroma:0.6.1
      environment:
        - IS_PERSISTENT=TRUE
        - PERSIST_DIRECTORY=/chroma/chroma
        - ANONYMIZED_TELEMETRY=FALSE
      volumes:
        - chroma-data:/chroma/chroma
      ports:
        - "8000:8000"
      networks:
        - db-network

  alert-manager:
    image: prom/alertmanager:v0.25.0
    restart: always
    networks:
      - db-network
    ports:
      - "9094:9093"
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    depends_on:
      - prometheus

volumes:
  mysql_data:
  keycloak-db-data:
  kafka_data:
  grafana-storage:
  es-data:
  postgres_data:
  chroma-data:
      driver: local

networks:
  db-network:
    driver: bridge