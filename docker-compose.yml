version: '3.8'

services:
  kong:
    image: kong:latest
    restart: always
    networks:
      - db-network
    environment:
      KONG_DATABASE: off
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled,cors
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml

  kafka:
    image: apache/kafka:latest
    restart: always
    networks:
      - db-network
    ports:
      - "9092:9092"
      - "9093:9093"  # Thêm port cho controller
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER  # Thêm biến này để chỉ định rõ listener cho controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: -1
    volumes:
      - kafka_data:/var/lib/kafka/data

  mysql-db:
    image: mysql:8.4.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: auth_service  # Tạo sẵn database auth_service
      MYSQL_USER: auth_user         # Tạo user cho auth-service
      MYSQL_PASSWORD: auth_password # Mật khẩu cho user
      MYSQL_ROOT_HOST: '%'          # Cho phép truy cập từ bất kỳ host nào
    command: --max_allowed_packet=128M --wait_timeout=28800 --interactive_timeout=28800 # Thêm file init SQL
    ports:
      - "3306:3306"
    networks:
      - db-network
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # File init để tạo law_service
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8082:80
    depends_on:
      - mysql-db
    networks:
      - db-network
    environment:
      PMA_HOST: mysql-db
      UPLOAD_LIMIT: 300M

  auth-service:
    build: ./auth-service
    restart: always
    depends_on:
      mysql-db:
        condition: service_healthy  # Chờ MySQL sẵn sàng
    networks:
      - db-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/auth_service?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "9001:9001"
    volumes:
      - ./auth-service/src:/app/src

  react-frontend:
    build:
      context: ./front-end/website
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    networks:
      - db-network
    depends_on:
      - kong
    expose:
      - "5173"
    volumes:
      - ./front-end/website:/app
      - /app/node_modules
    env_file:
      - ./front-end/website/.env

  crawl-api:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: uvicorn api:app --host 0.0.0.0 --port 5000 --reload
    restart: always
    depends_on:
      - mysql-db
      - redis
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    ports:
      - "5000:5000"
    volumes:
      - ./crawl:/app

  celery-worker:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: celery -A celery_app worker --loglevel=info
    restart: always
    depends_on:
      - redis
      - mysql-db
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    volumes:
      - ./crawl:/app

  celery-beat:
    build:
      context: ./crawl
      dockerfile: Dockerfile
    command: celery -A celery_app beat --loglevel=info
    restart: always
    depends_on:
      - redis
      - mysql-db
      - celery-worker
    networks:
      - db-network
    environment:
      DATABASE_URL: mysql+mysqlconnector://root:password@mysql-db:3306/law_service
    volumes:
      - ./crawl:/app

  redis:
    image: redis:alpine
    restart: always
    networks:
      - db-network

volumes:
  mysql_data:
  kafka_data:

networks:
  db-network:
    driver: bridge