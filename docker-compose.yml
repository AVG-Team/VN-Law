version: '3.8'

services:
  kong:
    image: kong:latest
    restart: always
    networks:
      - db-network
    environment:
      KONG_DATABASE: off
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled,cors
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml

  mysql-db:
    image: mysql:8.4.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "4000:3306"
    networks:
      - db-network
    volumes:
      - mysql_data:/var/lib/mysql

  chroma-training-chat:
    image: ghcr.io/chroma-core/chroma:latest
    restart: always
    ports:
      - "3308:8000"  # ChromaDB Port
    networks:
      - db-network
    volumes:
      - chroma_data_history:/chroma/chroma

  law-service:
    build: ./law-service
    restart: always
    depends_on:
      - mysql-db
    networks:
      - db-network
    environment :
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:4000/law_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
    ports:
      - "9002:9002"

  auth-service:
    build: ./auth-service
    restart: always
    depends_on:
      - mysql-db
    networks:
      - db-network
    env_file:
      - ./auth-service/src/main/resources/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/auth_service
    ports:
      - "9001:9001"

  react-frontend:
    build:
      context: ./front-end/website
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    networks:
      - db-network
    depends_on:
      - kong
    expose:
      - "5173"
      - "3000"
    volumes:
      - ./front-end/website:/app
      - /app/node_modules
    env_file:
      - ./front-end/website/.env
  zipkin:
      image: openzipkin/zipkin
      ports:
        - "9411:9411"
      depends_on: [ otel-collector ]
      networks:
        - net
  otel-collector:
      image: otel/opentelemetry-collector-contrib:0.111.0
      command: [ "--config=/etc/otel-collector-config.yaml" ]
      volumes:
        - ${PWD}/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      ports:
        - "4317:4317"  # OTLP
        - "4318:4318"
        - "55681:55681" # Legacy
      networks:
        - net
  server:
      image: ghcr.io/chroma-core/chroma:0.5.13
      volumes:
        - index_data:/index_data
      ports:
        - "8000:8000"
      networks:
        - net
      environment:
        - CHROMA_SERVER_AUTHN_PROVIDER=${CHROMA_SERVER_AUTHN_PROVIDER}
        - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=${CHROMA_SERVER_AUTHN_CREDENTIALS_FILE}
        - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_SERVER_AUTHN_CREDENTIALS}
        - CHROMA_OTEL_COLLECTION_ENDPOINT=http://otel-collector:4317/
        - CHROMA_OTEL_EXPORTER_HEADERS=${CHROMA_OTEL_EXPORTER_HEADERS:-{}}
        - CHROMA_OTEL_SERVICE_NAME=${CHROMA_OTEL_SERVICE_NAME:-chroma}
        - CHROMA_OTEL_GRANULARITY=${CHROMA_OTEL_GRANULARITY:-all}
      depends_on:
        - otel-collector
        - zipkin
      env_file:
        - chat-service/.chroma_env

volumes:
  mysql_data:
  chroma_data_history:

networks:
  db-network:
    driver: bridge