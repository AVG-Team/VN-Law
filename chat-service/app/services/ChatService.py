import openai
from app.services.LLMService import LLMService
import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

class ChatbotService:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY", "your-api-key-here")
        self.llm_service = LLMService()

    def generate_response(self, answer: str, question: str, context: str) -> str:
        """
        G·ª≠i c√¢u tr·∫£ l·ªùi t·ª´ LLM l√™n GPT ƒë·ªÉ vi·∫øt l·∫°i c√¢u tr·∫£ l·ªùi r√µ r√†ng, h·ª£p l√Ω.
        """
        if not answer:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n."

        prompt = f"""
            B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√°p l√Ω th√¢n thi·ªán, c√≥ nhi·ªám v·ª• h·ªó tr·ª£ ng∆∞·ªùi d√¢n Vi·ªát Nam hi·ªÉu r√µ c√°c quy ƒë·ªãnh ph√°p lu·∫≠t.

            N·ªôi dung ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ vƒÉn b·∫£n ph√°p lu·∫≠t:
            \"\"\"{context}\"\"\"

            C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√¢n l√†:
            \"\"\"{question}\"\"\"

            D∆∞·ªõi ƒë√¢y l√† n·ªôi dung c√¢u tr·∫£ l·ªùi:
            \"\"\"{answer}\"\"\"

            H√£y th·ª±c hi·ªán c√°c b∆∞·ªõc sau:
            1. ƒê√°nh gi√° xem c√¢u tr·∫£ l·ªùi n√†y c√≥ ph√π h·ª£p v·ªõi c√¢u h·ªèi kh√¥ng v√† kh√¥ng c·∫ßn tr·∫£ ra cho t√¥i bi·∫øt l√† c√≥ ph√π h·ª£p hay kh√¥ng.
            2. N·∫øu c√¢u tr·∫£ l·ªùi kh√¥ng ph√π h·ª£p v·ªõi c√¢u h·ªèi, h√£y vi·∫øt l·∫°i c√¢u tr·∫£ l·ªùi t·ª´ ƒë·∫ßu sao cho:
                - Tr·∫£ l·ªùi ƒë√∫ng theo quy ƒë·ªãnh ph√°p lu·∫≠t hi·ªán h√†nh t·∫°i Vi·ªát Nam.
                - Tr·∫£ l·ªùi r√µ r√†ng, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v·ªõi ng∆∞·ªùi d√¢n kh√¥ng chuy√™n lu·∫≠t.
                - S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, l·ªãch s·ª± nh∆∞ m·ªôt ng∆∞·ªùi tr·ª£ l√Ω ƒëang t∆∞ v·∫•n.
                - Gi·∫£i th√≠ch ƒë∆°n gi·∫£n n·∫øu c√≥ thu·∫≠t ng·ªØ ph√°p l√Ω kh√≥ hi·ªÉu.
                - C√≥ th·ªÉ th√™m v√≠ d·ª• minh h·ªça ng·∫Øn g·ªçn ƒë·ªÉ ng∆∞·ªùi d√¢n d·ªÖ h√¨nh dung (n·∫øu c·∫ßn thi·∫øt).
            3. N·∫øu c√¢u tr·∫£ l·ªùi ƒë√£ ph√π h·ª£p, h√£y vi·∫øt l·∫°i c√¢u tr·∫£ l·ªùi sao cho th√¢n thi·ªán, d·ªÖ hi·ªÉu v√† l·ªãch s·ª± h∆°n:
                - D√πng ng√¥n ng·ªØ th√¢n thi·ªán, d·ªÖ ti·∫øp c·∫≠n.
                - Gi·∫£i th√≠ch c√°c thu·∫≠t ng·ªØ kh√≥ hi·ªÉu m·ªôt c√°ch ƒë∆°n gi·∫£n.
                - N·∫øu c·∫ßn thi·∫øt, th√™m v√≠ d·ª• minh h·ªça ƒë·ªÉ ng∆∞·ªùi d√¢n d·ªÖ h√¨nh dung.
            4. C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√¢n c√≥ kh·ªõp v·ªõi n·ªôi dung vƒÉn b·∫£n ph√°p lu·∫≠t kh√¥ng? N·∫øu kh√¥ng, h√£y tr·∫£ l·ªùi l√† "Kh√¥ng c√≥ th√¥ng tin trong vƒÉn b·∫£n ph√°p lu·∫≠t ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.". (ƒê√¢y l√† m·ªôt ph·∫ßn quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o c√¢u tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m. N·∫øu c√¢u h·ªèi sai do v·ªõi n·ªôi dung c√¢u h·ªèi l√† h√£y tr·∫£ l·ªùi nh∆∞ tr√™n lu√¥n ).
            C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n c·∫ßn ph·∫£i ƒë√∫ng v√† ph√π h·ª£p v·ªõi y√™u c·∫ßu tr√™n.
            T√¥i ch·ªâ c·∫ßn nh·∫≠n ƒë∆∞·ª£c l√† c√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi ng∆∞·ªùi d√¢n ƒë∆∞a ra, m·ªçi th√¥ng tin kh√°c kh√¥ng c·∫ßn thi·∫øt ph·∫£i tr·∫£ l·ªùi.
            Kh√¥ng c·∫ßn n√≥i g√¨ v·ªÅ c√¢u h·ªèi hay c√¢u tr·∫£ l·ªùi sai hay ƒë√∫ng ch·ªâ c·∫ßn c√¢u tr·∫£ l·ªùi th√¥i nh√©.
            """
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",  # ho·∫∑c "gpt-3.5-turbo"
                messages=[
                    {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√°p l√Ω th√¥ng minh v√† l·ªãch s·ª±."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=300,
                top_p=0.9
            )
            return response.choices[0].message["content"].strip()

        except Exception as e:
            print(f"GPT API error: {e}")
            return "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi."
        
if __name__ == "__main__":
    # Kh·ªüi t·∫°o ChatbotService v·ªõi API key (c√≥ th·ªÉ ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c truy·ªÅn tr·ª±c ti·∫øp)
    chatbot = ChatbotService()

    context = """
    ƒêi·ªÅu 7. Tr√°ch nhi·ªám c·ªßa c∆° quan, t·ªï ch·ª©c ƒë·ªëi v·ªõi thanh ni√™n
    C∆° quan nh√† n∆∞·ªõc c√≥ tr√°ch nhi·ªám x√¢y d·ª±ng, t·ªï ch·ª©c th·ª±c hi·ªán ch√≠nh s√°ch ƒë·ªëi v·ªõi thanh ni√™n.
    M·∫∑t tr·∫≠n T·ªï qu·ªëc Vi·ªát Nam, t·ªï ch·ª©c ch√≠nh tr·ªã - x√£ h·ªôi ph·ªëi h·ª£p v·ªõi Nh√† n∆∞·ªõc chƒÉm lo, ph√°t huy vai tr√≤ c·ªßa thanh ni√™n.
    C∆° s·ªü gi√°o d·ª•c, ƒë√†o t·∫°o t·∫°o m√¥i tr∆∞·ªùng h·ªçc t·∫≠p, r√®n luy·ªán, ph√°t tri·ªÉn to√†n di·ªán cho thanh ni√™n.
    Doanh nghi·ªáp, t·ªï ch·ª©c kinh t·∫ø c√≥ tr√°ch nhi·ªám t·∫°o vi·ªác l√†m, ƒë√†o t·∫°o ngh·ªÅ cho thanh ni√™n.
    """

    # Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    question = "T√¥ l√¢m c√≥ b·ªã ph·∫°t kh√¥ng?"

    # S·ª≠ d·ª•ng LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi ban ƒë·∫ßu (t·ª´ RAG + LLM)
    raw_answer = chatbot.llm_service.answer_question(question,context)

    # ƒê∆∞a c√¢u tr·∫£ l·ªùi th√¥ v√†o GPT ƒë·ªÉ ch·ªânh s·ª≠a l·∫°i
    final_response = chatbot.generate_response(raw_answer,question,context)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\nüß† Tr·ª£ l√Ω ph√°p l√Ω tr·∫£ l·ªùi:")
    print(final_response)

    
